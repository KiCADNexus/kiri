#! /bin/bash

# This tool works with Kicad 6
# Tested on 6.0.5
# Requires: cliclick

readonly TIME=50

sed()
{
	case ${OSTYPE} in
		darwin*)
			gsed "$@"
			;;
		*)
			command sed "$@"
			;;
	esac
}

ctrl_c()
{
	# force to kill the childs
	pkill -P $$ --signal 9 &> /dev/null

	kill -9 "${XVFB_PID}" &> /dev/null
	kill -9 "${EESCHEMA_PID}" &> /dev/null

	exit 1
}

get_filename_without_extension()
{
	local filename="$(basename -- "${1}")"
	echo "${filename%.*}"
}

get_file_extension()
{
	echo "${1##*.}"
}

set_default_plot_settings()
{
	local eeschema_json="${HOME}/Library/Preferences/kicad/6.0/eeschema.json"

	# "plot": {
	#   "background_color": false,
	#   "color": true,
	#   "color_theme": "user",
	#   "format": 0,
	#   "frame_reference": true,
	#   "hpgl_origin": 0,
	#   "hpgl_paper_size": 0,
	#   "hpgl_pen_size": 0.5
	# },

	# 1.   ps - 2
	# 2.  pdf - 4
	# 3.  svg - 5
	# 4.  dxf - 3
	# 5. hpgl - 0

	background_color=false
	color=false
	format=5

	if [[ -f "${eeschema_json}" ]]; then
		sed -i "s/\"background_color\":.*/\"background_color\": ${background_color},/g" "${eeschema_json}"
		sed -i "s/\"color\":.*/\"color\": ${color},/g" "${eeschema_json}"
		sed -i "s/\"format\":.*/\"format\": ${format},/g" "${eeschema_json}"
	fi
}

set_plot_output_directory()
{
	local kicad_prj="${1}"
	local plot_directory="${2}"
	sed -i "s|\"plot_directory\":.*|\"plot_directory\": \"${plot_directory}\",|g" "${kicad_prj}"

	# Kicad 5.0
	sed -i "s|^PlotDirectoryName.*|PlotDirectoryName=${plot_directory}|g" "${kicad_prj}"

	# Kicad 6.0
	sed -i "s|\"plot_directory\":.*|\"plot_directory\": \"${plot_directory}\",|g" "${kicad_prj}"
}

launch_eeschema()
{
	local kicad_sch="${1}"

	defaults write com.apple.LaunchServices LSQuarantine -bool false
	defaults write com.apple.LaunchServices LSQuarantine -bool NO
	#sudo xattr -d com.apple.quarantine /Applications/KiCad/Eeschema.app

	open -a Eeschema "${kicad_sch}"

	echo "Waiting for Eeschema..."
	until [[ "$(ps aux | grep -v grep | grep -i eeschema.app | awk '{print $2;}')" -ge "1" ]]; do
		sleep 0.1
		cliclick w:${TIME}
	done

	export EESCHEMA_PID=$(ps aux | grep -v grep | grep -i eeschema.app | awk '{print $2;}')
	echo "Eeschema PID(${EESCHEMA_PID})"
}

kill_eeschema()
{
	kill -9 ${EESCHEMA_PID} 2> /dev/null
}

launch_plot_window()
{
	sleep 2

	# Refresh window
	cliclick kd:cmd t:r ku:cmd

	# Move focus to Top menu and Move selection to the File Menu
	cliclick kd:fn,ctrl kp:f2 ku:fn,ctrl
	cliclick w:${TIME}

	# Expand File menu (3rd item) and select Plot (last item)
	cliclick t:f kp:return kp:arrow-up kp:return
	cliclick w:${TIME}
}

wait_until_plot_finishes()
{
	local plot_dir="${1}"

	case ${kicad_sch_extension} in
		"sch")
			numof_sheets=$(grep -i "^Sheet" ${kicad_sch_path} | cut -d" " -f3)
			;;
		"kicad_sch")
			numof_sheets=$(jq '.sheets | length' ${kicad_prj})
			;;
	esac

	until [[ "$(ls -1 ${plot_dir}/*.svg | wc -l)" -ge ${numof_sheets} ]]; do
		sleep 0.1
		cliclick w:${TIME}
	done
	cliclick w:${TIME}
}

plot_schematics()
{
	local plot_dir="${1}"

	# Plot window will launch pre-configured
	# When it launches, the focus is the Output Directory field

	# Plot
	cliclick kp:tab kp:return
	cliclick w:${TIME}

	wait_until_plot_finishes "${plot_dir}"

	# Dismiss plot window
	cliclick kp:esc
	cliclick w:${TIME}
}

main()
{
	trap "exit 1" TERM
	trap ctrl_c SIGINT

	local kicad_sch_path="${1}"
	local output_dir_path="${2}"

	if [[ ! -f "${kicad_sch_path}" ]]; then
		echo "Missing .kicad_sch file"
		exit 1
	fi

	local project_name=$(get_filename_without_extension "${kicad_sch_path}")
	local kicad_sch_extension=$(get_file_extension "${kicad_sch_path}")

	case ${kicad_sch_extension} in
		"sch")
			kicad_prj_extension="pro"
			;;
		"kicad_sch")
			kicad_prj_extension="kicad_pro"
			;;
	esac

	local kicad_prj="${project_name}.${kicad_prj_extension}"

	if [[ "${#}" -lt 2 ]]; then
		output_dir_path="."
	else
		output_dir_path="${2}"
		if [[ ! -d "${output_dir_path}" ]]; then
			echo "Error: \"${output_dir_path}\" does not exist"
			exit 1
		fi
	fi

	echo -e "\nSchematic path = ${kicad_sch_path}"
	echo -e "   Output path = ${output_dir_path}"
	echo -e " Kicad project = ${kicad_prj}"

	local temp_dir=$(mktemp -d "dir_${RANDOM}")
	local output_temp_dir_path="${output_dir_path}/${temp_dir}"
	mkdir -p "${output_temp_dir_path}" &> /dev/null

	set_default_plot_settings
	set_plot_output_directory "${kicad_prj}" "${output_temp_dir_path}"

	launch_eeschema "${kicad_sch_path}"
	launch_plot_window
	plot_schematics "${output_temp_dir_path}" 2> /dev/null
	kill_eeschema

	# Organize generated files for KiRI
	svg_file_paths=($(find "${output_temp_dir_path}" -name "*.svg"))

	echo "Kicad exported files:"
	for svg_file in "${svg_file_paths[@]}"; do
		echo "> ${svg_file}"
	done

	mkdir -p "${output_dir_path}/_KIRI_/sch/" &> /dev/null

	echo "Renaming files:"
	if [[ -n ${svg_file_paths} ]]; then
		IFS=$'\n'
		for svg_file in "${svg_file_paths[@]}"; do

			svg_file_name=$(basename "${svg_file%.*}")
			match_line_no=$(cat "${output_dir_path}/_KIRI_/sch_sheets" | grep -m1 -n "|${svg_file_name}$" | cut -d":" -f1)

			if [[ -n "${match_line_no}" ]]; then
				new_svg_file="$(sed -n ${match_line_no}p "${output_dir_path}/_KIRI_/sch_sheets" | cut -f1 -d"|").svg"
				echo "${svg_file} -> ${output_dir_path}/_KIRI_/sch/${new_svg_file}" 2>&1
				cp -f "${svg_file}" "${output_dir_path}/_KIRI_/sch/${new_svg_file}" 2> /dev/null
			fi
		done
	fi

	# Remove temporary folder
	rm -rf "${output_temp_dir_path}"
}

main "${@}"
